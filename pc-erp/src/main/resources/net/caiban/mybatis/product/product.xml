<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.caiban.pc.erp.persist.product.ProductMapper">
	
	<insert id="insert" parameterType="net.caiban.pc.erp.domain.product.Product" keyProperty="id">
		INSERT INTO `product`
		(
			`code`,
			`name`,
			`category_code`,
			`remark`,
			`gmt_created`,
			`gmt_modified`,
			`cid`,
			`uid_created`,
			`uid_modified`,
			`status_life`
		)
		VALUES(
			#{code},
			#{name},
			#{categoryCode},
			#{remark},
			NOW(),
			NOW(),
			#{cid},
			#{uidCreated},
			#{uidModified},
			#{statusLife}
		)
	</insert>
	
	<sql id="default_column">
		`product`.`id`,
		`product`.`code`,
		`product`.`name`,
		`product`.`category_code` as categoryCode,
		`product`.`remark`,
		`product`.`cid`,
		`product`.`uid_created` as uidCreated,
		`product`.`uid_modified` as uidModified,
		`product`.`status_life` as statusLife,
		`product`.`gmt_created` as gmtCreated,
		`product`.`gmt_modified` as gmtModified
	</sql>
	
	<sql id="where_cond">
		<where>
			<if test="cond.code != null and cond.code !='' ">
				and `product`.code=#{cond.code}
			</if>
			<if test="cond.codeMatchBefore != null and cond.codeMatchBefore !='' ">
				and `product`.code like concat(#{cond.codeMatchBefore}, '%')
			</if>
			<if test="cond.cid != null">
				and `product`.cid=#{cond.cid}
			</if>
			<if test="cond.statusLife != null and cond.statusLife != ''">
				and `product`.status_life=#{cond.statusLife}
			</if>
			
			<if test="cond.categoryCode != null and cond.categoryCode != ''">
				and `product`.category_code=#{cond.categoryCode}
			</if>
			<if test="cond.categoryCodeMatchBefore != null and cond.categoryCodeMatchBefore != ''">
				and `product`.category_code like concat(#{cond.categoryCodeMatchBefore}, '%')
			</if>
			
			<if test="cond.name != null and cond.name != ''">
				and `product`.name=#{cond.name}
			</if>
			<if test="cond.nameMatchBefore != null and cond.nameMatchBefore != '' ">
				and `product`.name like concat(#{cond.nameMatchBefore},'%')
			</if>
			<if test="cond.nameFuzzy != null and cond.nameFuzzy != '' ">
				and `product`.name like concat('%', #{cond.nameFuzzy},'%')
			</if>
		</where>
	</sql>
	
	<select id="pagerDefault" resultType="net.caiban.pc.erp.domain.product.Product">
		select 
			<include refid="default_column"/>
		from `product`
		<include refid="where_cond"/>
		
		<if test="pager.sort !=null ">
			order by ${pager.sort}
			<if test="pager.dir != null">
				${pager.dir}
			</if>
		</if>
		<if test="pager.start>=0 and pager.limit>0">
			limit #{pager.start}, #{pager.limit}
		</if>
	</select>
	
	<select id="pagerDefaultCount" resultType="java.lang.Integer">
		select 
			count(id) as c
		from `product`
		<include refid="where_cond"/>
	</select>
	
	<delete id="delete">
		delete from `product` where id=#{id}
	</delete>
	
	<select id="queryOne" resultType="net.caiban.pc.erp.domain.product.Product">
		select 
			<include refid="default_column"/>
		from `product`
		where id=#{id}
	</select>
	
	<update id="update" parameterType="net.caiban.pc.erp.domain.product.Product">
		update `product` set
			<if test="code != null">
				code=#{code},
			</if>
			<if test="name != null">
				name=#{name},
			</if>
			<if test="categoryCode != null">
				category_code=#{categoryCode},
			</if>
			<if test="remark != null">
				remark=#{remark},
			</if>
			<if test="uidCreated != null">
				uid_created=#{uidCreated},
			</if>
			<if test="uidModified != null">
				uid_modified=#{uidModified},
			</if>
			<if test="statusLife != null">
				status_life=#{statusLife},
			</if>
			gmt_modified=now()
		where id=#{id}
	</update>
	
	<select id="queryOneByCode" resultType="net.caiban.pc.erp.domain.product.Product">
		select 
			<include refid="default_column"/>
		from `product`
		where cid=#{cid} and code=#{code}
	</select>
	
	<select id="queryCode" resultType="java.lang.String" >
		select code from product
		where id=#{id}
	</select>
	
	<select id="countByCid" resultType="java.lang.Integer">
		select count(id) as c from product where id=#{id} and cid=#{cid}
	</select>
	
	<select id="queryProductOfGroup" resultType="net.caiban.pc.erp.domain.product.ProductModel">
		select
			<include refid="default_column" />
		from product
		where exists (
			select id from product_group_item 
			where `product`.id=`product_group_item`.product_id
			and `product_group_item`.product_group_id = #{cond.groupId}
		)
	</select>
	
</mapper>

